// Test data generator for Users section
// This script generates sample usage logs with different IP addresses and user agents

const { createClient } = require('@supabase/supabase-js')

// Supabase configuration (you'll need to update these with your actual values)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'your-supabase-url'
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'your-supabase-key'

const supabase = createClient(supabaseUrl, supabaseKey)

// Sample data
const sampleIPs = [
  '192.168.1.100',
  '10.0.0.50',
  '172.16.0.25',
  '203.0.113.10',
  '198.51.100.15',
  '192.0.2.30',
  '172.16.1.45',
  '10.0.1.75'
]

const sampleUserAgents = [
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0',
  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
  'Mozilla/5.0 (iPhone; CPU iPhone OS 17_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Mobile/15E148 Safari/604.1',
  'Mozilla/5.0 (iPad; CPU OS 17_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Mobile/15E148 Safari/604.1',
  'Mozilla/5.0 (Android 14; Mobile; rv:121.0) Gecko/121.0 Firefox/121.0',
  'Mozilla/5.0 (Linux; Android 14; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36'
]

const sampleCodes = [
  'TEST123A',
  'DEMO456B',
  'USER789C',
  'SAMPLE01',
  'TRIAL02D',
  'ACCESS03'
]

async function generateTestData() {
  console.log('üöÄ Generating test user activity data...')
  
  try {
    // First, let's create some access codes
    console.log('üìù Creating test access codes...')
    
    for (const code of sampleCodes) {
      const expiresAt = new Date()
      expiresAt.setHours(expiresAt.getHours() + 24) // 24 hours from now
      
      const { error: codeError } = await supabase
        .from('access_codes')
        .upsert({
          code: code,
          expires_at: expiresAt.toISOString(),
          created_at: new Date().toISOString(),
          is_active: true,
          duration_minutes: 60,
          created_by: 'test-generator'
        })
      
      if (codeError && !codeError.message.includes('duplicate')) {
        console.error(`Error creating code ${code}:`, codeError)
      } else {
        console.log(`‚úÖ Created access code: ${code}`)
      }
    }
    
    // Now generate usage logs with different IPs and user agents
    console.log('üìä Generating usage logs...')
    
    const usageLogs = []
    const now = new Date()
    
    // Generate logs for the past 7 days
    for (let day = 0; day < 7; day++) {
      const date = new Date(now)
      date.setDate(date.getDate() - day)
      
      // Generate 3-8 logs per day
      const logsPerDay = Math.floor(Math.random() * 6) + 3
      
      for (let i = 0; i < logsPerDay; i++) {
        const randomIP = sampleIPs[Math.floor(Math.random() * sampleIPs.length)]
        const randomUA = sampleUserAgents[Math.floor(Math.random() * sampleUserAgents.length)]
        const randomCode = sampleCodes[Math.floor(Math.random() * sampleCodes.length)]
        
        // Random time during the day
        const logTime = new Date(date)
        logTime.setHours(Math.floor(Math.random() * 24))
        logTime.setMinutes(Math.floor(Math.random() * 60))
        
        // Random action (mostly 'used', some 'generated')
        const actions = ['used', 'used', 'used', 'used', 'generated']
        const action = actions[Math.floor(Math.random() * actions.length)]
        
        usageLogs.push({
          code: randomCode,
          action: action,
          timestamp: logTime.toISOString(),
          details: action === 'used' ? 'Code validated successfully' : 'Code generated by admin',
          ip_address: randomIP,
          user_agent: randomUA
        })
      }
    }
    
    // Insert usage logs in batches
    console.log(`üì• Inserting ${usageLogs.length} usage logs...`)
    
    const batchSize = 10
    for (let i = 0; i < usageLogs.length; i += batchSize) {
      const batch = usageLogs.slice(i, i + batchSize)
      
      const { error: logError } = await supabase
        .from('usage_logs')
        .insert(batch)
      
      if (logError) {
        console.error('Error inserting usage logs batch:', logError)
      } else {
        console.log(`‚úÖ Inserted batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(usageLogs.length/batchSize)}`)
      }
    }
    
    console.log('üéâ Test data generation completed!')
    console.log('üìà You should now see user activity in the admin panel Users section')
    console.log('üîó Visit: http://localhost:3001/admin/users')
    
  } catch (error) {
    console.error('‚ùå Error generating test data:', error)
  }
}

// Run the generator
if (require.main === module) {
  generateTestData()
}

module.exports = { generateTestData }
